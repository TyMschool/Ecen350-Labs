$date
	Thu Oct 23 16:22:03 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module SC_Control_tb $end
$var wire 1 ! Uncondbranch $end
$var wire 2 " SignOp [1:0] $end
$var wire 1 # RegWrite $end
$var wire 1 $ Reg2Loc $end
$var wire 1 % MemtoReg $end
$var wire 1 & MemWrite $end
$var wire 1 ' MemRead $end
$var wire 1 ( Branch $end
$var wire 1 ) ALUSrc $end
$var wire 4 * ALUOp [3:0] $end
$var reg 11 + opcode [10:0] $end
$var reg 11 , random_opcode [10:0] $end
$var integer 32 - errors [31:0] $end
$var integer 32 . i [31:0] $end
$var integer 32 / test_num [31:0] $end
$scope module uut $end
$var wire 11 0 opcode [10:0] $end
$var reg 4 1 ALUOp [3:0] $end
$var reg 1 ) ALUSrc $end
$var reg 1 ( Branch $end
$var reg 1 ' MemRead $end
$var reg 1 & MemWrite $end
$var reg 1 % MemtoReg $end
$var reg 1 $ Reg2Loc $end
$var reg 1 # RegWrite $end
$var reg 2 2 SignOp [1:0] $end
$var reg 1 ! Uncondbranch $end
$upscope $end
$scope task check_outputs $end
$var reg 4 3 exp_ALUOp [3:0] $end
$var reg 1 4 exp_ALUSrc $end
$var reg 1 5 exp_Branch $end
$var reg 1 6 exp_MemRead $end
$var reg 1 7 exp_MemWrite $end
$var reg 1 8 exp_MemtoReg $end
$var reg 1 9 exp_Reg2Loc $end
$var reg 1 : exp_RegWrite $end
$var reg 2 ; exp_SignOp [1:0] $end
$var reg 1 < exp_Uncondbranch $end
$var reg 1600 = test_name [1600:1] $end
$var reg 11 > test_opcode [10:0] $end
$upscope $end
$upscope $end
$scope module SC_Control_tb $end
$scope module uut $end
$upscope $end
$scope task check_outputs $end
$upscope $end
$upscope $end
$scope module SingleCycleProcTest_v $end
$var wire 64 ? currentPC [63:0] $end
$var wire 64 @ MemtoRegOut [63:0] $end
$var reg 1 A CLK $end
$var reg 1 B Reset $end
$var reg 8 C passed [7:0] $end
$var reg 64 D startPC [63:0] $end
$var reg 16 E watchdog [15:0] $end
$scope module uut $end
$var wire 1 A CLK $end
$var wire 1 B reset $end
$var wire 64 F startpc [63:0] $end
$var wire 1 G zero $end
$var wire 5 H rn [4:0] $end
$var wire 5 I rm [4:0] $end
$var wire 64 J regoutB [63:0] $end
$var wire 64 K regoutA [63:0] $end
$var wire 5 L rd [4:0] $end
$var wire 11 M opcode [10:0] $end
$var wire 64 N nextpc [63:0] $end
$var wire 32 O instruction [31:0] $end
$var wire 64 P extimm [63:0] $end
$var wire 64 Q dmemout [63:0] $end
$var wire 64 R aluout [63:0] $end
$var wire 64 S aluinputB [63:0] $end
$var wire 1 T Uncondbranch $end
$var wire 2 U SignOp [1:0] $end
$var wire 1 V RegWrite $end
$var wire 1 W Reg2Loc $end
$var wire 64 X MemtoRegOut [63:0] $end
$var wire 1 Y MemtoReg $end
$var wire 1 Z MemWrite $end
$var wire 1 [ MemRead $end
$var wire 1 \ Branch $end
$var wire 1 ] ALUSrc $end
$var wire 4 ^ ALUOp [3:0] $end
$var reg 64 _ currentpc [63:0] $end
$scope module alu $end
$var wire 64 ` BusB [63:0] $end
$var wire 1 G Zero $end
$var wire 64 a BusA [63:0] $end
$var wire 4 b ALUCtrl [3:0] $end
$var reg 64 c BusW [63:0] $end
$upscope $end
$scope module control $end
$var wire 11 d opcode [10:0] $end
$var reg 4 e ALUOp [3:0] $end
$var reg 1 ] ALUSrc $end
$var reg 1 \ Branch $end
$var reg 1 [ MemRead $end
$var reg 1 Z MemWrite $end
$var reg 1 Y MemtoReg $end
$var reg 1 W Reg2Loc $end
$var reg 1 V RegWrite $end
$var reg 2 f SignOp [1:0] $end
$var reg 1 T Uncondbranch $end
$upscope $end
$scope module dmem $end
$var wire 64 g Address [63:0] $end
$var wire 1 A Clock $end
$var wire 1 [ MemoryRead $end
$var wire 1 Z MemoryWrite $end
$var wire 64 h WriteData [63:0] $end
$var reg 64 i ReadData [63:0] $end
$scope task initset $end
$var reg 64 j addr [63:0] $end
$var reg 64 k data [63:0] $end
$upscope $end
$upscope $end
$scope module imem $end
$var wire 64 l Address [63:0] $end
$var reg 32 m Data [31:0] $end
$upscope $end
$scope module pclogic $end
$var wire 1 G ALUZero $end
$var wire 1 \ Branch $end
$var wire 64 n CurrentPC [63:0] $end
$var wire 1 T Uncondbranch $end
$var wire 64 o SignExtImm64 [63:0] $end
$var reg 64 p NextPC [63:0] $end
$upscope $end
$scope module regfile $end
$var wire 64 q BusA [63:0] $end
$var wire 64 r BusW [63:0] $end
$var wire 1 A Clk $end
$var wire 5 s RA [4:0] $end
$var wire 5 t RB [4:0] $end
$var wire 5 u RW [4:0] $end
$var wire 1 V RegWr $end
$var wire 64 v BusB [63:0] $end
$var reg 64 w readA [63:0] $end
$var reg 64 x readB [63:0] $end
$upscope $end
$scope module signext $end
$var wire 26 y Instruction [25:0] $end
$var wire 2 z SignOp [1:0] $end
$var reg 64 { SignExOut [63:0] $end
$upscope $end
$upscope $end
$scope task allPassed $end
$var reg 8 | numTests [7:0] $end
$var reg 8 } passed [7:0] $end
$upscope $end
$scope task passTest $end
$var reg 64 ~ actualOut [63:0] $end
$var reg 64 !" expectedOut [63:0] $end
$var reg 8 "" passed [7:0] $end
$var reg 257 #" testType [256:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
b0 k
b100000 j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
x]
x\
x[
xZ
xY
bx X
xW
xV
bx U
xT
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
xG
b0 F
b0 E
b0 D
b0 C
0B
0A
bx @
bx ?
b10001011000 >
b10000010100010001000100001000000101001001100101011001110110100101110011011101000110010101110010 =
0<
bx ;
1:
09
08
07
06
05
04
b10 3
bx 2
b10 1
b10001011000 0
b0 /
bx .
b0 -
bx ,
b10001011000 +
b10 *
0)
0(
0'
0&
0%
0$
1#
bx "
0!
$end
#1000
bx "
bx 2
b110 *
b110 1
1#
b10100110101010101000010001000000101001001100101011001110110100101110011011101000110010101110010 =
b110 3
b11001011000 >
b11001011000 +
b11001011000 0
b1 /
#2000
bx "
bx 2
b0 *
b0 1
1#
b10000010100111001000100001000000101001001100101011001110110100101110011011101000110010101110010 =
b0 3
b10001010000 >
b10001010000 +
b10001010000 0
b10 /
#3000
b1 *
b1 1
bx "
bx 2
1#
b10011110101001001010010001000000101001001100101011001110110100101110011011101000110010101110010 =
b1 3
b10101010000 >
b10101010000 +
b10101010000 0
b11 /
#4000
1)
x$
b0 "
b0 2
b10 *
b10 1
1#
b1000001010001000100010000100000010010010110110101101101011001010110010001101001011000010111010001100101 =
b0 ;
b10 3
14
x9
b10010001000 >
b10010001000 +
b10010001000 0
b0 .
b100 /
#5000
b10 *
b10 1
1#
1)
x$
b10010001001 >
b10010001001 +
b10010001001 0
b1 .
b101 /
#6000
b110 *
b110 1
1#
1)
x$
b1010011010101010100001000100000010010010110110101101101011001010110010001101001011000010111010001100101 =
b110 3
b11010001000 >
b11010001000 +
b11010001000 0
b0 .
b110 /
#7000
b110 *
b110 1
1#
1)
x$
b11010001001 >
b11010001001 +
b11010001001 0
b1 .
b111 /
#8000
b111 *
b111 1
1#
1)
x$
b1001101010011110101011001011010 =
b111 3
b11010010100 >
b11010010100 +
b11010010100 0
b0 .
b1000 /
#9000
b111 *
b111 1
1#
1)
x$
b11010010101 >
b11010010101 +
b11010010101 0
b1 .
b1001 /
#10000
b111 *
b111 1
1#
1)
x$
b11010010110 >
b11010010110 +
b11010010110 0
b10 .
b1010 /
#11000
b111 *
b111 1
1#
1)
x$
b11010010111 >
b11010010111 +
b11010010111 0
b11 .
b1011 /
#12000
b11 "
b11 2
1!
x%
bx *
bx 1
0#
x)
x$
b100001000100000001010000101010101101110011000110110111101101110011001000110100101110100011010010110111101101110011000010110110000101001 =
b11 ;
bx 3
1<
0:
x8
x4
b10100000 >
b10100000 +
b10100000 0
b0 .
b1100 /
#13000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10100001 >
b10100001 +
b10100001 0
b1 .
b1101 /
#14000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10100010 >
b10100010 +
b10100010 0
b10 .
b1110 /
#15000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10100011 >
b10100011 +
b10100011 0
b11 .
b1111 /
#16000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10100100 >
b10100100 +
b10100100 0
b100 .
b10000 /
#17000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10100101 >
b10100101 +
b10100101 0
b101 .
b10001 /
#18000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10100110 >
b10100110 +
b10100110 0
b110 .
b10010 /
#19000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10100111 >
b10100111 +
b10100111 0
b111 .
b10011 /
#20000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10101000 >
b10101000 +
b10101000 0
b1000 .
b10100 /
#21000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10101001 >
b10101001 +
b10101001 0
b1001 .
b10101 /
#22000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10101010 >
b10101010 +
b10101010 0
b1010 .
b10110 /
#23000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10101011 >
b10101011 +
b10101011 0
b1011 .
b10111 /
#24000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10101100 >
b10101100 +
b10101100 0
b1100 .
b11000 /
#25000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10101101 >
b10101101 +
b10101101 0
b1101 .
b11001 /
#26000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10101110 >
b10101110 +
b10101110 0
b1110 .
b11010 /
#27000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10101111 >
b10101111 +
b10101111 0
b1111 .
b11011 /
#28000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10110000 >
b10110000 +
b10110000 0
b10000 .
b11100 /
#29000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10110001 >
b10110001 +
b10110001 0
b10001 .
b11101 /
#30000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10110010 >
b10110010 +
b10110010 0
b10010 .
b11110 /
#31000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10110011 >
b10110011 +
b10110011 0
b10011 .
b11111 /
#32000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10110100 >
b10110100 +
b10110100 0
b10100 .
b100000 /
#33000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10110101 >
b10110101 +
b10110101 0
b10101 .
b100001 /
#34000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10110110 >
b10110110 +
b10110110 0
b10110 .
b100010 /
#35000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10110111 >
b10110111 +
b10110111 0
b10111 .
b100011 /
#36000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10111000 >
b10111000 +
b10111000 0
b11000 .
b100100 /
#37000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10111001 >
b10111001 +
b10111001 0
b11001 .
b100101 /
#38000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10111010 >
b10111010 +
b10111010 0
b11010 .
b100110 /
#39000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10111011 >
b10111011 +
b10111011 0
b11011 .
b100111 /
#40000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10111100 >
b10111100 +
b10111100 0
b11100 .
b101000 /
#41000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10111101 >
b10111101 +
b10111101 0
b11101 .
b101001 /
#42000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10111110 >
b10111110 +
b10111110 0
b11110 .
b101010 /
#43000
b11 "
b11 2
bx *
bx 1
1!
x%
x)
x$
b10111111 >
b10111111 +
b10111111 0
b11111 .
b101011 /
#44000
1(
b10 "
b10 2
b111 *
b111 1
0!
x%
0)
1$
b10000110100001001011010 =
b10 ;
b111 3
0<
15
04
19
b10110100000 >
b10110100000 +
b10110100000 0
b0 .
b101100 /
#45000
b10 "
b10 2
b111 *
b111 1
1(
x%
1$
b10110100001 >
b10110100001 +
b10110100001 0
b1 .
b101101 /
#46000
b10 "
b10 2
b111 *
b111 1
1(
x%
1$
b10110100010 >
b10110100010 +
b10110100010 0
b10 .
b101110 /
#47000
b10 "
b10 2
b111 *
b111 1
1(
x%
1$
b10110100011 >
b10110100011 +
b10110100011 0
b11 .
b101111 /
#48000
b10 "
b10 2
b111 *
b111 1
1(
x%
1$
b10110100100 >
b10110100100 +
b10110100100 0
b100 .
b110000 /
#49000
b10 "
b10 2
b111 *
b111 1
1(
x%
1$
b10110100101 >
b10110100101 +
b10110100101 0
b101 .
b110001 /
#50000
b10 "
b10 2
b111 *
b111 1
1(
x%
1$
b10110100110 >
b10110100110 +
b10110100110 0
b110 .
b110010 /
#51000
b10 "
b10 2
b111 *
b111 1
1(
x%
1$
b10110100111 >
b10110100111 +
b10110100111 0
b111 .
b110011 /
#52000
1'
1#
1)
b1 "
b1 2
b10 *
b10 1
0(
1%
x$
b1001100010001000101010101010010 =
b1 ;
b10 3
05
16
1:
18
14
x9
b11111000010 >
b11111000010 +
b11111000010 0
b1000 .
b110100 /
#53000
1&
b1 "
b1 2
b10 *
b10 1
0'
0#
x%
1)
1$
b1010011010101000101010101010010 =
17
06
0:
x8
19
b11111000000 >
b11111000000 +
b11111000000 0
b110101 /
#54000
b0 "
b0 2
b0 *
b0 1
0&
0%
0)
0$
b10101010110111001100100011001010110011001101001011011100110010101100100001000000110111101110000011000110110111101100100011001010010000000110001 =
b0 ;
b0 3
07
08
04
09
b0 >
b0 +
b0 0
b0 ,
b110110 /
#55000
b10101010110111001100100011001010110011001101001011011100110010101100100001000000110111101110000011000110110111101100100011001010010000000110010 =
b11111111111 >
b11111111111 +
b11111111111 0
b11111111111 ,
b110111 /
#56000
b10101010110111001100100011001010110011001101001011011100110010101100100001000000110111101110000011000110110111101100100011001010010000000110011 =
b1010101010 >
b1010101010 +
b1010101010 0
b1010101010 ,
b111000 /
#57000
b10101010110111001100100011001010110011001101001011011100110010101100100001000000110111101110000011000110110111101100100011001010010000000110100 =
b10101010101 >
b10101010101 +
b10101010101 0
b10101010101 ,
b111001 /
#58000
b10101010110111001100100011001010110011001101001011011100110010101100100001000000110111101110000011000110110111101100100011001010010000000110101 =
b110011001 >
b110011001 +
b110011001 0
b110011001 ,
b111010 /
#59000
b10101010110111001100100011001010110011001101001011011100110010101100100001000000110111101110000011000110110111101100100011001010010000000110110 =
b11001100110 >
b11001100110 +
b11001100110 0
b11001100110 ,
b111011 /
#60000
b10101010110111001100100011001010110011001101001011011100110010101100100001000000110111101110000011000110110111101100100011001010010000000110111 =
b11100011 >
b11100011 +
b11100011 0
b11100011 ,
b111100 /
1A
#61000
b10101010110111001100100011001010110011001101001011011100110010101100100001000000110111101110000011000110110111101100100011001010010000000111000 =
b11100011100 >
b11100011100 +
b11100011100 0
b11100011100 ,
b111101 /
#62000
b10101010110111001100100011001010110011001101001011011100110010101100100001000000110111101110000011000110110111101100100011001010010000000111001 =
b1111110000 >
b1111110000 +
b1111110000 0
b1111110000 ,
b111110 /
#63000
b1010101011011100110010001100101011001100110100101101110011001010110010000100000011011110111000001100011011011110110010001100101001000000011000100110000 =
b10000001111 >
b10000001111 +
b10000001111 0
b10000001111 ,
b111111 /
#64000
b1000000 /
#74000
